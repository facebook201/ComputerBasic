{"remainingRequest":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/syolmm/code/DOC/ComputerBasic/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/syolmm/code/DOC/ComputerBasic/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/syolmm/code/DOC/ComputerBasic/docs/Data/DataStructure/sort/README.md?vue&type=template&id=60b37173&","dependencies":[{"path":"/Users/syolmm/code/DOC/ComputerBasic/docs/Data/DataStructure/sort/README.md","mtime":1573547085230},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"排序算法\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#排序算法\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 排序算法\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"排序算法是《数据结构与算法》中最基本的算法之一，排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", {\n          attrs: {\n            src:\n              \"https://github.com/hustcc/JS-Sorting-Algorithm/raw/master/res/sort.png\",\n            alt: \"border\"\n          }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"关于时间复杂度：\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。\\n线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；\\nO(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序\\n线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。\\n关于稳定性：\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"名词解释：\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"n：数据规模\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"k：“桶”的个数\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"In-place：占用常数内存，不占用额外内存\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Out-place：占用额外内存\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}