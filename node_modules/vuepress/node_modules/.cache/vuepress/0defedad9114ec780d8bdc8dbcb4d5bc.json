{"remainingRequest":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/syolmm/code/DOC/ComputerBasic/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/syolmm/code/DOC/ComputerBasic/docs/Data/desgin/README.md?vue&type=template&id=6c02dbc9&","dependencies":[{"path":"/Users/syolmm/code/DOC/ComputerBasic/docs/Data/desgin/README.md","mtime":1574919922006},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/ComputerBasic/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"设计原则\"><a class=\"header-anchor\" href=\"#设计原则\">#</a> 设计原则</h1>\n<h2 id=\"面向对象的六大原则\"><a class=\"header-anchor\" href=\"#面向对象的六大原则\">#</a> 面向对象的六大原则</h2>\n<ul>\n<li>单一职责 SRP</li>\n<li>开发封闭 OCP</li>\n<li>里式替换 LSP</li>\n<li>依赖倒置 DIP</li>\n<li>接口分离 ISP</li>\n<li>最少知识 LKP</li>\n</ul>\n<h3 id=\"单一职责原则\"><a class=\"header-anchor\" href=\"#单一职责原则\">#</a> 单一职责原则</h3>\n<p><strong>一个对象或方法只做一件事情</strong> 适用范围有接口、方法、类。接口和方法必须保证单一职责</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token comment\">// </span>\n<span class=\"token keyword\">const</span> OprType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">UPDATE_NAME</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'update_name'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'update_password'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 错误示范</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserOpr</span> <span class=\"token punctuation\">{</span>\n  boolean <span class=\"token function\">updateUserInformation</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> OprType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserOprImplement</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserOpr</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateUserInformation</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> oprType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oprType <span class=\"token operator\">===</span> OprType<span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_NAME</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 更新姓名</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oprType <span class=\"token operator\">===</span> OprType<span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_PASSWORD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 更新密码</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"开发封闭原则\"><a class=\"header-anchor\" href=\"#开发封闭原则\">#</a> 开发封闭原则</h3>\n<p>类、方法对其扩展开放，对其修改封闭。在不修改的前提下进行扩展，有新的需求出现时，我们对其扩展现有的方法，对象。\n修改关闭 不能对实体进行任何的修改。</p>\n<h3 id=\"里氏替换原则\"><a class=\"header-anchor\" href=\"#里氏替换原则\">#</a> 里氏替换原则</h3>\n<p>所有引用基类的地方必须能透明地使用其子类对象。简单来说就是父亲有的，子类就一定有，父类有的子类不能修改 但是可以增加。</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红烧排骨'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红烧糖醋排骨'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面输出红烧糖醋排骨就是不对的 我们不能去修改父类一样的方法 我们应该新增一个方法</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红烧排骨'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红烧糖醋排骨'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">braisedSweetAndSourPorkRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红烧糖醋排骨'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保证原有的方法不变 去新增一个方法</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">braisedRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">braisedSweetAndSourPorkRibs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"依赖倒置原则\"><a class=\"header-anchor\" href=\"#依赖倒置原则\">#</a> 依赖倒置原则</h3>\n<p><strong>高层次的模块不应该依赖于低层次的模块，它们应该依赖于抽象，抽象不应该依赖于具体实现，具体实现应该依赖于抽象</strong></p>\n</div>\n",null]}