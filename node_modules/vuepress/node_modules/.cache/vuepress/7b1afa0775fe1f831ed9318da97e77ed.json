{"remainingRequest":"/Users/syolmm/code/DOC/DataStructure/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/syolmm/code/DOC/DataStructure/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/syolmm/code/DOC/DataStructure/docs/Data/desginPatter/README.md?vue&type=template&id=48996047&","dependencies":[{"path":"/Users/syolmm/code/DOC/DataStructure/docs/Data/desginPatter/README.md","mtime":1574908302138},{"path":"/Users/syolmm/code/DOC/DataStructure/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/DataStructure/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/DataStructure/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/DataStructure/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/syolmm/code/DOC/DataStructure/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"基础知识部分\"><a class=\"header-anchor\" href=\"#基础知识部分\">#</a> 基础知识部分</h1>\n<h2 id=\"高阶函数\"><a class=\"header-anchor\" href=\"#高阶函数\">#</a> 高阶函数</h2>\n<h3 id=\"高阶函数实现-aop\"><a class=\"header-anchor\" href=\"#高阶函数实现-aop\">#</a> 高阶函数实现 AOP</h3>\n<p>AOP（面向切面编程）主要是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常等。抽离出来之后 再动态植入到业务逻辑模块，这样保持业务逻辑模块的纯净和高内聚性，其次可以方便的复用某些模块功能。</p>\n<p>在JavaScript中实现 AOP，都是指把一个函数 “动态植入” 另一个函数中。例如装饰者模式。</p>\n<h3 id=\"分时函数\"><a class=\"header-anchor\" href=\"#分时函数\">#</a> 分时函数</h3>\n<p>就短时间要多的大量工作分成多块时间来完成，避免卡死。比如创建DOM，1秒钟创建1000个节点改为每隔200毫秒创建8个。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// timeChunck</span>\n<span class=\"token comment\">/**\n * @param array 创建要用到的数据\n * @param fn    创建的逻辑函数\n * @param count 创建的节点数\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeChunk</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> obj<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}