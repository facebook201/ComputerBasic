(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{183:function(_,v,t){"use strict";t.r(v);var s=t(0),a=Object(s.a)({},(function(){var _=this.$createElement;this._self._c;return this._m(0)}),[function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"操作系统-operatingsystem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统-operatingsystem"}},[_._v("#")]),_._v(" 操作系统 OperatingSystem")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("操作系统的下面内容主要来自清华大学的理论知识课件、以及其他地方的资料自己总结而来的。")])])]),_._v(" "),t("h2",{attrs:{id:"什么是操作系统？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是操作系统？"}},[_._v("#")]),_._v(" 什么是操作系统？")]),_._v(" "),t("p",[_._v("简单来说 操作系统也是一个软件。它是管理下层硬件，为上层软件提供统一的、容易理解的抽象API的软件。")]),_._v(" "),t("ul",[t("li",[_._v("操作系统是一个控制程序")]),_._v(" "),t("li",[_._v("是一个资源管理器\n"),t("ul",[t("li",[_._v("应用程序与硬件之间的中间层")]),_._v(" "),t("li",[_._v("管理各种计算机软硬件资源")]),_._v(" "),t("li",[_._v("提供访问计算机软硬件资源的高效手段")]),_._v(" "),t("li",[_._v("解决资源访问冲突、确保资源公平使用")])])])]),_._v(" "),t("h3",{attrs:{id:"操作系统的地位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的地位"}},[_._v("#")]),_._v(" 操作系统的地位")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/facebook201/ComputerBasic/master/docs/img/operatingsystem/op1.png",alt:"border"}})]),_._v(" "),t("p",[_._v("操作系统是对计算机硬件进行一层隔离，对上层应用提供常见逻辑的一些资源。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/facebook201/ComputerBasic/master/docs/img/operatingsystem/op2.png",alt:"border"}})]),_._v(" "),t("h3",{attrs:{id:"ucore操作系统的内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ucore操作系统的内核"}},[_._v("#")]),_._v(" ucore操作系统的内核")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/facebook201/ComputerBasic/master/docs/img/operatingsystem/os.png",alt:"border"}}),_._v(";")]),_._v(" "),t("h3",{attrs:{id:"操作系统内核特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统内核特征"}},[_._v("#")]),_._v(" 操作系统内核特征")]),_._v(" "),t("ul",[t("li",[_._v("并发\n"),t("ul",[t("li",[_._v("计算机系统中同时存在多个运行的程序、需要OS管理和调度资源")])])]),_._v(" "),t("li",[_._v("共享\n"),t("ul",[t("li",[_._v("同时访问")]),_._v(" "),t("li",[_._v("互斥共享 内存访问的时候 怎么管理")])])]),_._v(" "),t("li",[_._v("虚拟\n"),t("ul",[t("li",[_._v("利用躲到程序设计技术、让每个用户都觉得有一个计算机在为他服务")])])]),_._v(" "),t("li",[_._v("异步\n"),t("ul",[t("li",[_._v("程序的执行不是一贯到底、而是走走停停，向前推进的速度不可预知")]),_._v(" "),t("li",[_._v("只要运行环境相同 OS需要保证程序运行的结果也要相同 相同的输入有相同的输出")])])])]),_._v(" "),t("h2",{attrs:{id:"为什么学习操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么学习操作系统"}},[_._v("#")]),_._v(" 为什么学习操作系统")]),_._v(" "),t("ul",[t("li",[_._v("学习操作系统有挑战")]),_._v(" "),t("li",[_._v("操作系统很有用处 熟悉工作原理")]),_._v(" "),t("li",[_._v("操作系统更好的帮助你工作")])]),_._v(" "),t("blockquote",[t("ul",[t("li",[_._v("它是计算机系统的基本组成部分")]),_._v(" "),t("li",[_._v("硬件的发展和应用需求所驱动 就像 windows 有那么多版本的操作系统是一个概念")]),_._v(" "),t("li",[_._v("学术和工业的持续推进")])])]),_._v(" "),t("h2",{attrs:{id:"计算机体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机体系结构"}},[_._v("#")]),_._v(" 计算机体系结构")]),_._v(" "),t("p",[_._v("（CPU = 运算器 + 控制器）")]),_._v(" "),t("ul",[t("li",[_._v("运算器")]),_._v(" "),t("li",[_._v("控制器")]),_._v(" "),t("li",[_._v("存储器  （内存）")]),_._v(" "),t("li",[_._v("输入设备")]),_._v(" "),t("li",[_._v("输出设备")])]),_._v(" "),t("p",[_._v("运算器和控制器单元集成在CPU中实现，存储器的容量不断扩大、输入输出设备不断更新，这些部件构成了当代计算机硬件系统的基本组成。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/v2-92fdb4030ccc4cc1aacda3dd200291c9_r.jpg",alt:"border"}})]),_._v(" "),t("h3",{attrs:{id:"cpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[_._v("#")]),_._v(" CPU")]),_._v(" "),t("ul",[t("li",[_._v("寄存器 是CPU组成部分，用来暂存指令、数据和地址。一般一个CPU 有 20 ~ 100  个寄存器")]),_._v(" "),t("li",[_._v("控制器 负责内存上的指令。数据读入寄存器，根据指令的结果控制计算机")]),_._v(" "),t("li",[_._v("运算器 负责运算从内存中读入寄存器的数据")]),_._v(" "),t("li",[_._v("时钟 负责发出CPU 开始计时的时钟信号")])]),_._v(" "),t("h3",{attrs:{id:"总线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总线"}},[_._v("#")]),_._v(" "),t("strong",[_._v("总线")])]),_._v(" "),t("p",[_._v("总线是用于 CPU 和内存以及其他设备之间的通信，总线可分为 3 种：")]),_._v(" "),t("ul",[t("li",[t("em",[_._v("地址总线")]),_._v("，用于指定 CPU 将要操作的内存地址；")]),_._v(" "),t("li",[t("em",[_._v("数据总线")]),_._v("，用于读写内存的数据；")]),_._v(" "),t("li",[t("em",[_._v("控制总线")]),_._v("，用于发送和接收信号，比如中断、设备复位等信号，CPU 收到信号后自然进行响应，这时也需要控制总线；")])]),_._v(" "),t("p",[_._v("当 CPU 要读写内存数据的时候，一般需要通过两个总线：")]),_._v(" "),t("ul",[t("li",[_._v("首先要通过「地址总线」来指定内存的地址；")]),_._v(" "),t("li",[_._v("再通过「数据总线」来传输数据")])]),_._v(" "),t("h2",{attrs:{id:"指令和状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令和状态"}},[_._v("#")]),_._v(" 指令和状态")]),_._v(" "),t("ul",[t("li",[_._v("指令\n"),t("ul",[t("li",[_._v("特权指令：操作系统内核部分使用，用户不能使用。（I/O, 清内存，设置时钟等）")]),_._v(" "),t("li",[_._v("非特权指令 ：")])])])]),_._v(" "),t("blockquote",[t("p",[_._v("注意："),t("strong",[_._v("为了限制应用程序的行为，必须在应用程序和操作系统执行时有不同的状态，核心问题在于保护关键寄存器和重要的物理内存。且记住下面的两种状态都是CPU的两种状态之一，所以一般是从一种状态切换到另一种状态。")])])]),_._v(" "),t("ul",[t("li",[_._v("状态 PSW 状态标识\n"),t("ul",[t("li",[_._v("用户态：用户态：执行非特权指令")]),_._v(" "),t("li",[_._v("核心态 ：执行全部指令 "),t("strong",[_._v("CPU的特权模式")])]),_._v(" "),t("li",[_._v("核心态 —> 到用户态"),t("strong",[_._v("是执行一个特权指令。将程序状态字(PSW)标志位设置为用户态。")])])])])]),_._v(" "),t("p",[t("strong",[_._v("用户态和核心态之间的切换通过中断实现（且是唯一途径），使得操作系统获得计算机的控制权。从而让操作系统开展管理工作（进程的切换，分配I/O设备）、[ 有了中断 才能实现多道程序并发执行]")])]),_._v(" "),t("h2",{attrs:{id:"系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[_._v("#")]),_._v(" 系统调用")]),_._v(" "),t("p",[t("strong",[_._v("系统调用是操作系统给应用程序使用的接口，提供给应用程序调用特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务")])]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("凡是与资源有关的操作（存储分配、I/O 操作，文件管理）都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。保证稳定性和安全性，防止用户非法操作。")])])]),_._v(" "),t("h3",{attrs:{id:"功能分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能分类"}},[_._v("#")]),_._v(" 功能分类")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("文件管理：完成设备的 请求/释放/启动等")])]),_._v(" "),t("li",[t("strong",[_._v("设备管理:  完成文件的 读、写、创建、删除等")])]),_._v(" "),t("li",[t("strong",[_._v("进程管理: 进程的 创建、撤销、阻塞、唤醒等")])]),_._v(" "),t("li",[t("strong",[_._v("进程控制: 进程之间的 消息传递、信号传递等")])]),_._v(" "),t("li",[t("strong",[_._v("内存管理: 内存的 分配、回收等")])])])])}],!1,null,null,null);v.default=a.exports}}]);