(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{174:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"c语言基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c语言基础知识"}},[t._v("#")]),t._v(" C语言基础知识")]),t._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h3",{attrs:{id:"一般的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般的数据类型"}},[t._v("#")]),t._v(" 一般的数据类型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("字节")]),t._v(" "),a("th",[t._v("应用")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("char")]),t._v(" "),a("td",[t._v("字符型")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("用于存储单个字符")]),t._v(" "),a("td",[t._v("char sex = 'M';")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("整型")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("存储整数")]),t._v(" "),a("td",[t._v("int height = 18;")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("单精度浮点型")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("存储小数")]),t._v(" "),a("td",[t._v("float price = 11.1;")])]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td",[t._v("双精度浮点型")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("存储位数更多的小数")]),t._v(" "),a("td",[t._v("double pi = 3.1415926")])])])]),t._v(" "),a("h3",{attrs:{id:"整数的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数的类型"}},[t._v("#")]),t._v(" 整数的类型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("字节")]),t._v(" "),a("th",[t._v("取值范围")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("整型")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("（-32768~32767）-2^15 - 2^15 - 1")])]),t._v(" "),a("tr",[a("td",[t._v("short int")]),t._v(" "),a("td",[t._v("短整型 (int可省略)")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("（-32768~32767）-2^15 - 2^15 - 1")])]),t._v(" "),a("tr",[a("td",[t._v("long int")]),t._v(" "),a("td",[t._v("长整型 (int可省略)")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("-2^31 - 2^31 - 1")])]),t._v(" "),a("tr",[a("td",[t._v("unsigned int")]),t._v(" "),a("td",[t._v("无符号整型")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("（0~65535）0~2^16 -1")])]),t._v(" "),a("tr",[a("td",[t._v("unsigned short int")]),t._v(" "),a("td",[t._v("无符号短整型")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("（0~65535）0~2^16 -1")])]),t._v(" "),a("tr",[a("td",[t._v("unsigned long int")]),t._v(" "),a("td",[t._v("无符号长整型")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("（0~4294967295）0~2^32-1")])])])]),t._v(" "),a("h2",{attrs:{id:"格式化输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出"}},[t._v("#")]),t._v(" 格式化输出")]),t._v(" "),a("p",[t._v("格式化输出的语句，可以说是占位输出，是将各种类型的数据按照格式化后的类型及指定的位置从计算机上显示。"),a("strong",[t._v('printf("输出格式符"，输出项)')])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("格式符")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("举例子")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("%d")]),t._v(" "),a("td",[t._v("带符号十进制整数")]),t._v(" "),a("td",[t._v('printf("小明今年？岁: %d\\n", age);')])]),t._v(" "),a("tr",[a("td",[t._v("%c")]),t._v(" "),a("td",[t._v("单个字符")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("%s")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("%f")]),t._v(" "),a("td",[t._v("6为小数")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("格式符的个数要与变量、常量或者表达式的个数 一 一 对应 。")]),t._v(" "),a("h2",{attrs:{id:"c-变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-变量"}},[t._v("#")]),t._v(" C 变量")]),t._v(" "),a("p",[t._v("变量其实只不过是程序可操作的存储区的名称，类型决定变量存储的大小和布局。")]),t._v(" "),a("p",[t._v("变量初值的问题可以分为非静态的全局变量、局部变量和静态变量(也分全局和局部)三类。如果没有明确初始化的话，\n全局变量：多数编译器初始化为0，有的是随机值；\n局部变量：都是随机值；\n静态变量：都是0。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 局部变量就是随机")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"内存中的位置: %p\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var1变量的地址： 0x7ffeede49908 283672630")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"不可变常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不可变常量"}},[t._v("#")]),t._v(" 不可变常量")]),t._v(" "),a("p",[t._v("值不发生改变的量称为常里。C里面的常量称为直接常量和符号常量。"),a("strong",[t._v("常量不能改变的")])]),t._v(" "),a("p",[t._v("用标识符来表示一个变量 称之为符号常量，符号常量在使用之前必须先定义")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("#define 标识符 常量值")])]),t._v(" "),a("li",[a("strong",[t._v("使用const关键字")])])]),t._v(" "),a("p",[t._v("一般符号常量习惯使用大写字母。变量的标识符使用小写字母。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" PI 3.14")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" type variable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"圆周率：%f\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"自动类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动类型转换"}},[t._v("#")]),t._v(" 自动类型转换")]),t._v(" "),a("p",[t._v("变量的数据类型存在自动转换的情况，例如将一根字符赋值给int，会在编译的时候自动转换。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[a("strong",[t._v("字节小的可以向字节大的自动转换，但字节大的不能向字节小的自动转换")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("char类型转换为int数据类型遵循ASCII码中的对应值")])])])])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"赋值后的x值为：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 99")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"强制转换类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制转换类型"}},[t._v("#")]),t._v(" 强制转换类型")]),t._v(" "),a("p",[t._v("强制类型转换是通过定义类型转换运算来实现。")]),t._v(" "),a("p",[t._v("(数据类型)(表达式)")]),t._v(" "),a("ul",[a("li",[t._v("数据类型和表达式都需要加上括号")]),t._v(" "),a("li",[t._v("转换后不会改变原数据的类型以及变量值 只在本次运算中临时性转换")]),t._v(" "),a("li",[t._v("强制转换后的运算结果不遵循四舍五入原则")])]),t._v(" "),a("h2",{attrs:{id:"运算符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符的优先级"}},[t._v("#")]),t._v(" 运算符的优先级")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("优先级")]),t._v(" "),a("th",[t._v("运算符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1 最高级别")]),t._v(" "),a("td",[t._v("（）")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("！ +（正） -（负） ++ --")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("* / %")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("+(加)   -（减）")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("<    <=    >=   >")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("==     !=")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[t._v("&&")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("||")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[t._v("? :")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[t._v("=    +=   -=  *=  /= %=")])])])]),t._v(" "),a("h2",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),a("h3",{attrs:{id:"while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[t._v("#")]),t._v(" while循环")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行代码块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("表达式表示循环条件，代码块为循环体。")]),t._v(" "),a("p",[t._v("1、while语句中的"),a("strong",[t._v("表达式一般是关系表达或逻辑表达式")]),t._v("，当表达式的值为假时不执行循环体，反之则循环体一直执行。")]),t._v(" "),a("p",[t._v("2、一定要记着"),a("strong",[t._v("在循环体中改变循环变量的值")]),t._v("，否则会出现死循环（无休止的执行）。")]),t._v(" "),a("p",[t._v("3、循环体如果包括有一个以上的语句，则"),a("strong",[t._v("必须用{}括起来")]),t._v("，组成复合语句。")]),t._v(" "),a("p",[t._v("do-while循环语句的语义是：它先执行循环中的执行代码块，然后再判断while中表达式是否为真，如果为真则继续循环；如果为假，则终止循环。因此，"),a("strong",[t._v("do-while循环至少要执行一次循环语句")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行代码块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它的执行过程如下：")]),t._v(" "),a("p",[t._v("第一步：执行表达式1，对循环变量做初始化；")]),t._v(" "),a("p",[t._v("第二步：判断表达式2，若其值为真（非0），则执行for循环体中执行代码块，然后向下执行；若其值为假（0），则结束循环；")]),t._v(" "),a("p",[t._v("第三步：执行表达式3；")]),t._v(" "),a("p",[t._v("第四步：执行for循环中执行代码块后执行第二步；")]),t._v(" "),a("p",[t._v("第五步：循环结束，程序继续向下执行。")]),t._v(" "),a("h3",{attrs:{id:"for循环二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环二"}},[t._v("#")]),t._v(" for循环二")]),t._v(" "),a("p",[t._v("在for循环中，"),a("strong",[t._v("表达式1")]),t._v("是一个或多个"),a("strong",[t._v("赋值语句")]),t._v("，它用来"),a("strong",[t._v("控制变量的初始值")]),t._v("；"),a("strong",[t._v("表达式2")]),t._v("是一个"),a("strong",[t._v("关系表达式")]),t._v("，它决定什么时候退出循环；"),a("strong",[t._v("表达式3")]),t._v("是循环变量的"),a("strong",[t._v("步进值")]),t._v("，定义控制循环变量每循环一次后按什么方式变化。这"),a("strong",[t._v("三部分之间用分号(;)分开")]),t._v("。")]),t._v(" "),a("p",[t._v("使用for语句应该"),a("strong",[t._v("注意")]),t._v("：")]),t._v(" "),a("p",[t._v("1、for循环中的“表达式1、2、3”均可可以缺省，但"),a("strong",[t._v("分号(;)不能缺省")]),t._v("。")]),t._v(" "),a("p",[t._v("2、省略“表达式1（循环变量赋初值）”，"),a("strong",[t._v("表示不对循环变量赋初始值")]),t._v("。如：")]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("知道循环次数")]),t._v("的情况下更适合"),a("strong",[t._v("使用for循环")]),t._v("；")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 使用for循环解决 9 * 9 乘法口诀\n   */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d*%d=%d "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"break"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#break"}},[t._v("#")]),t._v(" break")]),t._v(" "),a("ul",[a("li",[t._v("一般形式 break；  其作用是使流程跳到循环体之外，接着执行循环体下面的语句。")]),t._v(" "),a("li",[t._v("break 只能用在for循环和 switch语句中。不能单独使用")]),t._v(" "),a("li",[t._v("continue语句提前结束本次循环 而break直接跳出循环")])]),t._v(" "),a("h1",{attrs:{id:"提高篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提高篇"}},[t._v("#")]),t._v(" 提高篇")]),t._v(" "),a("h2",{attrs:{id:"函数-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-function"}},[t._v("#")]),t._v(" 函数 Function")]),t._v(" "),a("p",[t._v("函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。C 标准库提供了大量的程序可以调用的内置函数。例如")]),t._v(" "),a("ul",[a("li",[t._v("strcat() 连接两个字符串")]),t._v(" "),a("li",[t._v("memcpy() 从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中")])]),t._v(" "),a("h3",{attrs:{id:"定义函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义函数"}},[t._v("#")]),t._v(" 定义函数")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("return_type "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameter list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// body of the function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("返回类型：一个函数可以返回一个值。return_type 是函数返回的值的数据类型，有些函数执行所需要的操作而不返回值 这种情况下 return_tyope 是关键字 void。")]),t._v(" "),a("li",[t._v("函数名称：函数的实际名称。函数名和参数列表一起构成了函数签名")]),t._v(" "),a("li",[t._v("参数：参数就是占位符。当函数被调用时，向参数传一个值 这个值被称为实际参数。参数是可选的")]),t._v(" "),a("li",[t._v("函数主体：函数主体包含一组定义函数执行任务的语句")])]),t._v(" "),a("h3",{attrs:{id:"函数声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[t._v("#")]),t._v(" 函数声明")]),t._v(" "),a("p",[t._v("函数声明会告诉编译器函数名称和如何调用函数。函数的实际主体可以单独定义。")]),t._v(" "),a("h3",{attrs:{id:"函数参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),a("p",[t._v("如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的"),a("strong",[t._v("形式参数")]),t._v("。")]),t._v(" "),a("p",[t._v("形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。")]),t._v(" "),a("ul",[a("li",[t._v("传值调用：该方法把参数的实际值复制给函数的形式参数。修改函数内的形参不会影响实际参数")]),t._v(" "),a("li",[t._v("传引用调用：通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。")])]),t._v(" "),a("p",[a("strong",[t._v("C使用传值调用在默认情况下，意味着函数内的代码不能改变用于调用函数的实际参数。")])]),t._v(" "),a("h2",{attrs:{id:"c-作用域规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-作用域规则"}},[t._v("#")]),t._v(" C 作用域规则")]),t._v(" "),a("p",[t._v("作用域是程序中定义的变量所在的区域，超过该区域变量就不能被访问。C语言中有三个地方可以声明变量：")]),t._v(" "),a("ul",[a("li",[t._v("在函数或块内部的局部变量")]),t._v(" "),a("li",[t._v("在所有函数外部的全局变量")]),t._v(" "),a("li",[t._v("在形式参数的函数参数定义中")])]),t._v(" "),a("h4",{attrs:{id:"局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[t._v("#")]),t._v(" 局部变量")]),t._v(" "),a("p",[t._v("在某个函数或块的内部声明的变量称为局部变量。它们只能被该函数或该代码块内部的语句使用。局部变量在函数外部是不可知的。")]),t._v(" "),a("h4",{attrs:{id:"全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),a("p",[t._v("全局变量是定义在函数外部，通常是在程序的顶部。全局变量在整个程序生命周期内都是有效的，在任意的函数内部能访问全局变量。全局变量可以被任何函数访问。也就是说，全局变量在声明后整个程序中都是可用的。")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("全局变量与局部变量在内存中的区别")]),t._v(" "),a("ul",[a("li",[t._v("全局变量保存在内存的全局存储区中，占用静态的存储单元；")]),t._v(" "),a("li",[t._v("局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。")])])]),t._v(" "),a("p",[t._v("在调用函数过程中发生的实参与形参之间的数据传递，常称为“虚实结合”")]),t._v(" "),a("ol",[a("li",[t._v("在定义函数中制定的形参，在没有出现函数调用时不占用内存中的存储单元。在函数调用时才分配内存")]),t._v(" "),a("li",[t._v("将实参的值传递给形参")]),t._v(" "),a("li",[t._v("在执行函数时，由于形参已经有值。可以用形参进行运算。")]),t._v(" "),a("li",[t._v("通过return语句将函数值返回，若无返回值，则无return")]),t._v(" "),a("li",[t._v("调用结束后，形参被释放掉，实参保留原值（单向传值）")])]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("类型符 数组名[常量表达式]。")]),t._v(" "),a("ul",[a("li",[t._v("数组名的命名规则和变量名相同，遵循标识符命名规")]),t._v(" "),a("li",[t._v("定义数组需要制定数组的个数 方括号中国的变量表达式用来表示元素的个数 即数组长度")]),t._v(" "),a("li",[t._v("常量表达式中可以报考常量和符号常量 不能包括变量")])]),t._v(" "),a("p",[t._v("C 语言支持"),a("strong",[t._v("数组")]),t._v("数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("type arrayName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arraySize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("传数组给函数，就函数而言，数组的长度是无关紧要的，因为 C 不会对形式参数执行边界检查。")]),t._v(" "),a("h2",{attrs:{id:"enum-枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum-枚举"}},[t._v("#")]),t._v(" enum 枚举")]),t._v(" "),a("p",[t._v("枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" 枚举名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" 枚举元素"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，枚举元素"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个枚举成员默认值是0，后续枚举成员的值在前一个成员上加1 如果第一个是1 后面第二个就是2 以此类推")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DAY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  MON "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  TUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" THU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FRI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SUN\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// spring = 0 后面依次 3 4 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("season")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("spring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" summer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" autumn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" winter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),a("p",[t._v("在C里面，每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号( & )运算符访问地址。表示在内存中的一个地址。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"内存中的位置: %p\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var1变量的地址： 0x7ffeede49908")]),t._v("\n")])])]),a("h3",{attrs:{id:"什么是指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是指针"}},[t._v("#")]),t._v(" 什么是指针")]),t._v(" "),a("ul",[a("li",[t._v("指针是一种变量,其值为另一个变量的地址，即，内存位置的直接地址。必须在使用指针存储其他变量地址之前，对其进行声明。")]),t._v(" "),a("li",[a("strong",[t._v("指针也是一个类型，由其他类型派生")]),t._v(" "),a("ul",[a("li",[t._v("比如指向 int的指针类型")]),t._v(" "),a("li",[t._v("char 的指针类型")]),t._v(" "),a("li",[t._v("double 的指针类型")])])])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int* 指针类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p 指针类型的变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针类型的值")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 p 是指向类型变量a的 指针")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("strong",[t._v("* 是解引用运算符 在指针变量前面加 就表示这个指针指向的内存单元中的值")])])]),t._v(" "),a("li",[a("p",[t._v("指针变量保存的值，也就是地址 是可以变的。")])]),t._v(" "),a("li",[a("p",[t._v("一个变量保存另一个指针的地址，指针的指针")])]),t._v(" "),a("li",[a("p",[t._v("把一个指针赋值NULL，就表明是空指针。")])])]),t._v(" "),a("h3",{attrs:{id:"指针应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针应用"}},[t._v("#")]),t._v(" 指针应用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("交换值 swap")])]),t._v(" "),a("li",[a("p",[t._v("函数传参（"),a("strong",[t._v("数组变量是一个特殊的指针，数组变量本身表达的就是地址。")]),t._v("）")])]),t._v(" "),a("li",[a("p",[t._v("数组元素表达的是变量 需要用 & 取地址符")])]),t._v(" "),a("li",[a("p",[t._v("数组变量是 const指针，是常量 不能被赋值")])])]),t._v(" "),a("h3",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("const在 * 的前面 那么它前面指的东西不能被修改。")]),t._v(" "),a("p",[t._v("const 在 * 的后面 表示指针不能被修改。")]),t._v(" "),a("h3",{attrs:{id:"函数指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数指针"}},[t._v("#")]),t._v(" 函数指针")]),t._v(" "),a("p",[t._v("函数指针是指向函数的指针变量，我们说的指针变量是指向一个整型、字符型或数组等变量。而函数指针是指向函数。")]),t._v(" "),a("h2",{attrs:{id:"结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),a("p",[t._v("它是一种用户可以自己定义存储不同类型的数据结构。是复合数据类型的一类。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// struct 结构体关键字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tag 结构体的标志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// member-list 为结构体成员列表，其必须列出所有成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// variable-list 结构体声明的变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tag、member-list、variable-list这3部分至少要出现2个。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tag")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" member"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("list "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" variable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);